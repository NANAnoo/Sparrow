---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Shawwy.
--- DateTime: 4/24/2023 3:58 PM
---

require "luaclass"
require "Component"


AnimationActions =
{
    Pause = 0,
    Reset = 1,
    Resume = 2
}

AnimationState =
{
    Start = 0,
    Stopped = 1,
    Paused = 2,
    OnPlaying = 3
}

AnimationComponent = class("AnimationComponent", Component);

--init with animation
function AnimationComponent:init(animFilePath)

    self.animFilePath = animFilePath
    self.onGoingAnimState = AnimationState.Stopped
    self.onGoingAnim = "default";
    self.playSpeed = 1.0;

end

--Set play speed
function AnimationComponent:setPlaySpeed(playSpeed)
    self:update("playSpeed",playSpeed)
end
--get play speed
function AnimationComponent:getPlaySpeed()
    return self.playSpeed
end

--SetLoop
function AnimationComponent:setLoop(loopEnabled)

    if loopEnabled then
        self:update("enableLoop", loopEnabled)
    else
        self:update("disableLoop", loopEnabled)
    end
end

function AnimationComponent:swapAnimation(animationName)

    --Set state: to be implemented
    --Stop current animation
    self:setState(AnimationState.Stopped)

    self:update("swapAnimation",animationName)
    self.onGoingAnim = animationName
    --Start current Animation
    self:setState(AnimationState.OnPlaying)
end

function AnimationComponent:setState(state)

    local shouldUpdate = false
    local oldState = self.onGoingAnimState

    if oldState == AnimationState.OnPlaying then

        if state == AnimationState.Pause or state == AnimationState.Stopped then
            shouldUpdate = true
        end
    end

    if oldState == AnimationState.Stopped then

        if state == AnimationState.OnPlaying then
            shouldUpdate = true
        end
    end

    if oldState == AnimationState.Paused then

        if state == AnimationState.OnPlaying or state == AnimationState.Stopped then
            shouldUpdate = true
        end
    end

    if shouldUpdate then
        self.onGoingAnimState = state
        self:update("setState",state)
    end

end

function AnimationComponent:getState()
    return self.onGoingAnimState
end


function AnimationComponent:synchronize()

    local animFiles = self:getCppValue("animFiles")
    for path, state in pairs(animFiles) do
        self.onGoingAnim = path
        self.onGoingAnimState = state
    end
end



